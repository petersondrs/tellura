[{"properties":{"post_type":["attachment"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"LayerSlider 5 responsive demo slider","width":"100%","height":"720","responsive":"on","maxwidth":"1280","forceresponsive":"on","responsiveunder":"0","sublayercontainer":"0","autostart":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","skin":"v5","backgroundcolor":"","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","hoverprevnext":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","lazyload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: -10px; top: -10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) {\r\n\r\n}","cbstart":"function(data) {\r\n\r\n}","cbstop":"function(data) {\r\n\r\n}","cbpause":"function(data) {\r\n\r\n}","cbanimstart":"function(data) {\r\n\r\n}","cbanimstop":"function(data) {\r\n\r\n}","cbprev":"function(data) {\r\n\r\n}","cbnext":"function(data) {\r\n\r\n}"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"75,79","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"fading background","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg21.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"6000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"kreatura media","media":"text","type":"h1","imageId":"","image":"","html":"KREATURA MEDIA","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"400\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"40\\\",\\\"color\\\":\\\"#286e89\\\"}","top":"60px","left":"800px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"presents","media":"text","type":"h2","imageId":"","image":"","html":"presents","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-60\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"60\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#fa6b4b\\\"}","top":"100","left":"801","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-1","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-d-5-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"right -50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"450px","left":"100px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-2","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-d-5-6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left -50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"450px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-3","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-d-5-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"1\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"300px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-4","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-d-5-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"1900\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-90\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"300px","left":"100px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-5","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-d-5-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"2200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"right 150% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"150px","left":"100px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5-6","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-d-5-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 150% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"150px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"layerslider","media":"text","type":"h1","imageId":"","image":"","html":"LAYERSLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"340px\\\",\\\"font-family\\\":\\\"Oswald, Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"60px\\\",\\\"color\\\":\\\"#a14730\\\",\\\"border-radius\\\":\\\"5px\\\"}","top":"65px","left":"80px","style":"font-weight: 500; text-align: center; opacity: .5;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"dynamic slider","media":"text","type":"p","imageId":"","image":"","html":"DYNAMIC SLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"150px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"from your","media":"text","type":"p","imageId":"","image":"","html":"from your <span style=\\\"font-weight: 500; color: #555;\\\">WordPress posts<\/span> and pages","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"190px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"timeline","media":"text","type":"p","imageId":"","image":"","html":"TIMELINE VIEW","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"250px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for better","media":"text","type":"p","imageId":"","image":"","html":"for better timings","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"290px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"new transitions","media":"text","type":"p","imageId":"","image":"","html":"NEW TRANSITIONS","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"350px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"transitions","media":"text","type":"p","imageId":"","image":"","html":"slide, fade, scale, skew and rotate layers even in 3D","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5100\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"390px","left":"499px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"interface revamp","media":"text","type":"p","imageId":"","image":"","html":"INTERFACE REVAMP","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"20\\\",\\\"rotatexin\\\":\\\"30\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"20\\\",\\\"rotatexout\\\":\\\"-30\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#fa6b4b\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"450px","left":"500px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for easy and clear work","media":"text","type":"p","imageId":"","image":"","html":"working with the plugin is more easy","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"5800\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"25% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"color\\\":\\\"#333\\\"}","top":"490px","left":"499px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"5","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg4.jpg","thumbnailId":"","thumbnail":"","slidedelay":"9500","timeshift":"-3000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"&","media":"text","type":"p","imageId":"","image":"","html":"&","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"200px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"-17px","left":"915px","style":"opacity: .3; font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"responsive","media":"text","type":"h1","imageId":"","image":"","html":"RESPONSIVE","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"60\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"400\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-60\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"40\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"60px","left":"800px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"mobile ready","media":"text","type":"h2","imageId":"","image":"","html":"mobile ready","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-60\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"3000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"60\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#286e89\\\"}","top":"100","left":"801","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"version","media":"text","type":"h1","imageId":"","image":"","html":"VERSION","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"450\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, HelveticaNeue-UltraLight, HelveticaNeue-Light, HelveticaNeue, Helvetica, Arial, serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#29768f\\\",\\\"border-radius\\\":\\\"4px\\\"}","top":"497px","left":"788px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"5","media":"text","type":"h3","imageId":"","image":"","html":"5","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"4000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"450\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"400\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"220px","left":"912px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"text left half","media":"text","type":"h1","imageId":"","image":"","html":"<span style=\\\"color: #286e89;\\\">WITH HUGE<\/span><br>AND","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3500\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-90\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"461px","left":"767px","style":"font-weight: 300; text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"text right half","media":"text","type":"h3","imageId":"","image":"","html":"<span style=\\\"color: #286e89;\\\">PERFORMANCE<\/span><br>FEATURE UPDATE","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"3500\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"461px","left":"943px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"tablet","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-a-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"2010\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"765px\\\"}","top":"180px","left":"-82px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"slider shadow","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-a-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"2010\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"495px","left":"135px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"slide one","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-a-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"275px","left":"135px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"slide two","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-a-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1.5\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"50\\\",\\\"durationout\\\":\\\"2000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"275px","left":"135px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"touch","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-a-6.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1\\\",\\\"delayin\\\":\\\"3498\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"750\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeOutSine\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"10\\\",\\\"scaleyout\\\":\\\"10\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"476px","left":"436px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"touching hand","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-a-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"bottom\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"bottom\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"475px","left":"383px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph performance v5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"400px\\\",\\\"background\\\":\\\"#29768f\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"180px","left":"610px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph performance v4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"50px\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"530px","left":"590px","style":"opacity: .5","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"8x performance","media":"text","type":"p","imageId":"","image":"","html":"8x<br>performance","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"line-height\\\":\\\"25px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"589px","left":"533px","style":"font-style: italic; text-align: center; font-weight: 500; opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph features v5","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"200px\\\",\\\"background\\\":\\\"#29768f\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"380px","left":"410px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"graph features v4","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"10px\\\",\\\"height\\\":\\\"50px\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"2px\\\"}","top":"530px","left":"390px","style":"opacity: .5","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"many new features","media":"text","type":"p","imageId":"","image":"","html":"many new<br>features","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"24\\\",\\\"line-height\\\":\\\"25px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"589px","left":"349px","style":"font-style: italic; text-align: center; font-weight: 500; opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-responsive.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"520px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-layers.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6700\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"450px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-mobile.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"6900\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"380px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-options.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7100\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"310px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-performance.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7300\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"240px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-slideshow.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"170px","left":"200px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-youtube.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"520px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-vimeo.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"450px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-html5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7400\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"380px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-ios.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"310px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-android.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"7800\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"240px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feature responsive copy copy copy copy copy copy copy copy copy copy","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/feature-wordpress.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"8000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"25% 25% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"90\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"60px\\\"}","top":"170px","left":"130px","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"4","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-b-bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"intorducing","media":"text","type":"p","imageId":"","image":"","html":"introducing","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-50\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"600\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"50\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"44%","left":"50%","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"parallax layers","media":"text","type":"p","imageId":"","image":"","html":"PARALLAX LAYERS","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"750\\\",\\\"delayin\\\":\\\"250\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-50\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"600\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInBack\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"50\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"50px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"50%","left":"50%","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"bokeh","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-b-1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-2\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"120%\\\",\\\"height\\\":\\\"auto\\\"}","top":"30%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants bg","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-b-2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"353px","left":"237px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants far","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-b-3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{}","top":"453px","left":"483px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants mid","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-b-4.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"150\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"150\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"5\\\"}","url":"","target":"_self","styles":"{}","top":"456px","left":"586px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"plants close","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/slide-b-5.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"7\\\"}","url":"","target":"_self","styles":"{}","top":"421px","left":"659px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"move your mouse","media":"text","type":"p","imageId":"","image":"","html":"Move your mouse<br>\r\nover this slide!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"left 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"left 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"35\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"47%","left":"690","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"mouse","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/mouse.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"90\\\",\\\"transformoriginin\\\":\\\"right 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1000\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"-90\\\",\\\"transformoriginout\\\":\\\"right 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"45%","left":"585px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"fancy parallax effect","media":"text","type":"p","imageId":"","image":"","html":"FANCY PARALLAX EFFECT","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-45\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"-1\\\",\\\"transformoriginin\\\":\\\"left bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"45\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"right bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#849e00\\\",\\\"background\\\":\\\"#ffffff\\\",\\\"border-radius\\\":\\\"4\\\"}","top":"560px","left":"50px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"by mouse move","media":"text","type":"p","imageId":"","image":"","html":"by mouse move","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-45\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"right top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"2\\\",\\\"scaleyin\\\":\\\"2\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"45\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"left top 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"600px","left":"50px","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"11","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg51.jpg","thumbnailId":"","thumbnail":"","slidedelay":"5500","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"blur bg","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg31.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.1\\\",\\\"scaleyin\\\":\\\"1.1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"0px","left":"0px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"embeddig videos?","media":"text","type":"p","imageId":"","image":"","html":"embedding videos?","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-70\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"3\\\",\\\"scaleyin\\\":\\\"3\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"500\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"70\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffe9db\\\"}","top":"50%","left":"50%","style":"font-weight: 300; background: white; background: rgba(255,255,255,.2);","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Glass","media":"html","type":"p","imageId":"","image":"","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"20\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% -150\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"-20\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% -150\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"660px\\\",\\\"height\\\":\\\"380px\\\"}","top":"100px","left":"50%","style":"background: white; background: rgba(255,255,255,.2); box-shadow: 0px 5px 70px -20px black;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Video","media":"html","type":"p","imageId":"","image":"","html":"<iframe src=\\\"\/\/player.vimeo.com\/video\/15069551?title=0&byline=0&portrait=0&color=f75402\\\" width=\\\"640\\\" height=\\\"360\\\" frameborder=\\\"0\\\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeInOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"20\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% -150\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"-20\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% -150\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"110px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"youtube","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/youtube-color.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutCubic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-180\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"300\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutCubic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"360\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80%","left":"35%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"vimeo","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/vimeo-color.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2550\\\",\\\"easingin\\\":\\\"easeInOutCubic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-270\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutCubic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"270\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"html5","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/html5-color.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-300\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2600\\\",\\\"easingin\\\":\\\"easeInOutCubic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-360\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"100\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutCubic\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"180\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80%","left":"65%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feat","media":"text","type":"p","imageId":"","image":"","html":"video","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"3300\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"4\\\",\\\"scaleyout\\\":\\\"4\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"15\\\",\\\"color\\\":\\\"#ffdcc7\\\"}","top":"630px","left":"35%","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feat 2","media":"text","type":"p","imageId":"","image":"","html":"video","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"3350\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"4\\\",\\\"scaleyout\\\":\\\"4\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"15\\\",\\\"color\\\":\\\"#ffdcc7\\\"}","top":"630px","left":"50%","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"feat 3","media":"text","type":"p","imageId":"","image":"","html":"video + audio","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"500\\\",\\\"delayin\\\":\\\"3400\\\",\\\"easingin\\\":\\\"easeOutBack\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"4\\\",\\\"scaleyout\\\":\\\"4\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"15\\\",\\\"color\\\":\\\"#ffdcc7\\\"}","top":"630px","left":"65%","style":"opacity: .75;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"rich media support","media":"text","type":"p","imageId":"","image":"","html":"RICH MEDIA SUPPORT ","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"150\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-150\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffe9db\\\"}","top":"30px","left":"30px","style":"font-weight: 300; background: black; background: rgba(0,0,0,.2);","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"with optional autoplay","media":"text","type":"p","imageId":"","image":"","html":"WITH OPTIONAL AUTOPLAY","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-150\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"150\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"-60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffe9db\\\"}","top":"30px","left":"835px","style":"font-weight: 300; background: black; background: rgba(0,0,0,.2);","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"21,105","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/bg6b.jpg","thumbnailId":"","thumbnail":"","slidedelay":"8000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"circle","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/circle.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"3000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"155px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"circle 2","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/circle.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"linear\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"1\\\",\\\"easingout\\\":\\\"linear\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"2\\\",\\\"scaleyout\\\":\\\"2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"155px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"&","media":"text","type":"p","imageId":"","image":"","html":"&","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"0\\\",\\\"scaleyin\\\":\\\"0\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"200px\\\",\\\"color\\\":\\\"#f06a52\\\"}","top":"334px","left":"56px","style":"font-weight: 300; opacity: .4","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"all these features","media":"text","type":"p","imageId":"","image":"","html":"ALL THESE FEATURES","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#bd5949\\\"}","top":"420px","left":"20px","style":"font-weight: 300; background: white; background: rgba(255,255,255,.85)","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"much more!","media":"text","type":"p","imageId":"","image":"","html":"much more!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"-60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"-60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#bd5949\\\"}","top":"460px","left":"173px","style":"font-weight: 500;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"to create","media":"text","type":"p","imageId":"","image":"","html":"...to create","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"2500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"90\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"right bottom 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1500\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"right bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#bd5949\\\"}","top":"420px","left":"1113px","style":"font-weight: 500; text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"the best slider","media":"text","type":"p","imageId":"","image":"","html":"THE BEST SLIDER","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2500\\\",\\\"delayin\\\":\\\"3250\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"90\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"width\\\":\\\"260px\\\",\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#f06a52\\\"}","top":"460px","left":"990px","style":"font-weight: 300; text-align: right;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"with no compromises","media":"text","type":"p","imageId":"","image":"","html":"with no compromises!","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"3500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"60\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1.5\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"60\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.5\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#d9482b\\\"}","top":"505px","left":"983px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"ls5box","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/ls5box.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".8\\\",\\\"scaleyout\\\":\\\".8\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"180px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"other demo sliders","media":"text","type":"p","imageId":"","image":"","html":"Please check the other demo sliders","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"4000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".8\\\",\\\"scaleyin\\\":\\\".8\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"24px\\\",\\\"color\\\":\\\"#9c8b9c\\\"}","top":"28px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow up","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/arrow-up.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"4200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".5\\\",\\\"scaleyin\\\":\\\".5\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"0\\\",\\\"scaleyout\\\":\\\"0\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"9px","left":"837px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]},{"properties":{"post_type":["attachment"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Full width demo slider","width":"100%","height":"500px","maxwidth":"","forceresponsive":"on","responsiveunder":"1280","sublayercontainer":"1280","autostart":"on","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","skin":"noskin","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","lazyload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"salad side","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/s1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"300\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-50\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"220\\\",\\\"easingout\\\":\\\"easeInOutQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% top 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"280px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad side close blur","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/s2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"30\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1720\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".9\\\",\\\"scaleyin\\\":\\\".9\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"300\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% bottom  0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\".5\\\",\\\"scaleyout\\\":\\\".5\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"230px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/s2.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"250\\\",\\\"durationin\\\":\\\"950\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"0\\\",\\\"offsetyout\\\":\\\"-8\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"270\\\",\\\"easingout\\\":\\\"easeInOutQuart\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1.2\\\",\\\"scaleyout\\\":\\\"1.2\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"65%","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"salad","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/s1.jpg","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1720\\\",\\\"easingin\\\":\\\"easeInOutQuart\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\".7\\\",\\\"scaleyin\\\":\\\".7\\\",\\\"offsetxout\\\":\\\"-800\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"195px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"freas features","media":"text","type":"p","imageId":"","image":"","html":"FRESH FEATURES","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#82d10c\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"150px","left":"116px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for starter","media":"text","type":"p","imageId":"","image":"","html":"for starter","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"31px\\\",\\\"color\\\":\\\"#6db509\\\"}","top":"190px","left":"125px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow left","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/left.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"-40\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"-40\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#3","target":"_self","styles":"{}","top":"460px","left":"610px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow right","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#2","target":"_self","styles":"{}","top":"460px","left":"650px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"lamb far","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/l1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"300\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-300\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"-1\\\"}","url":"","target":"_self","styles":"{}","top":"157px","left":"284px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lamb middle","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/l2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"600\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"1\\\"}","url":"","target":"_self","styles":"{}","top":"20px","left":"50%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"lamb close","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/l3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"900\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-900\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{}","top":"37px","left":"564px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"spicy parallax","media":"text","type":"p","imageId":"","image":"","html":"SPICY PARALLAX EFFECT","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"10\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#f04705\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"170px","left":"174px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for main course","media":"text","type":"p","imageId":"","image":"","html":"for main course","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"8\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"31px\\\",\\\"color\\\":\\\"#f04705\\\"}","top":"210px","left":"183px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow left","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/left.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"#1","target":"_self","styles":"{}","top":"430px","left":"210px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow right","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"#3","target":"_self","styles":"{}","top":"430px","left":"250px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"1","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/fw-1.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"-1000","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"cake far","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/d1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"400\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"129px","left":"487px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"cake close","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/d2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-200\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"0\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-200\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"104px","left":"70px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"sweet transitions","media":"text","type":"p","imageId":"","image":"","html":"SWEET TRANSITIONS","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"-90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-400\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"1000\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"height\\\":\\\"40px\\\",\\\"padding-right\\\":\\\"10px\\\",\\\"padding-left\\\":\\\"10px\\\",\\\"font-family\\\":\\\"Lato, \\'Open Sans\\', sans-serif\\\",\\\"font-size\\\":\\\"30px\\\",\\\"line-height\\\":\\\"37px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#544f8c\\\",\\\"border-radius\\\":\\\"3px\\\"}","top":"320px","left":"830px","style":"font-weight: 300;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"for dessert","media":"text","type":"p","imageId":"","image":"","html":"for dessert","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"2000\\\",\\\"delayin\\\":\\\"2000\\\",\\\"easingin\\\":\\\"easeOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"90\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% top 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-600\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-family\\\":\\\"\\'Indie Flower\\'\\\",\\\"font-size\\\":\\\"31px\\\",\\\"color\\\":\\\"#544f8c\\\"}","top":"360px","left":"836px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow left","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/left.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"-50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#2","target":"_self","styles":"{}","top":"430px","left":"960px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"arrow right","media":"img","type":"p","imageId":"","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/right.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"50\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1000\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"50\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"#1","target":"_self","styles":"{}","top":"430px","left":"1000px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]},{"properties":{"title":"Carousel demo","width":"1280","height":"720","responsive":"on","responsiveunder":"0","sublayercontainer":"0","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","twowayslideshow":"on","loops":"0","forceloopnum":"on","autoplayvideos":"on","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","keybnav":"on","touchnav":"on","skin":"carousel","backgroundcolor":"transparent","backgroundimage":"","sliderstyle":"margin-bottom: 50px;","navprevnext":"on","navbuttons":"on","thumb_nav":"always","thumb_width":"100","thumb_height":"60","thumb_container_width":"60%","thumb_active_opacity":"35","thumb_inactive_opacity":"100","imgpreload":"on","yourlogo":"","yourlogostyle":"left: 10px; top: 10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) { }","cbstart":"function(data) { }","cbstop":"function(data) { }","cbpause":"function(data) { }","cbanimstart":"function(data) { }","cbanimstop":"function(data) { }","cbprev":"function(data) { }","cbnext":"function(data) { }"},"layers":[{"properties":{"3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/tablet.png","thumbnail":"","slidedelay":"4000","new_transitions":"on","slidedirection":"right","timeshift":"0","durationin":"1500","easingin":"easeInOutQuint","delayin":"0","durationout":"1500","easingout":"easeInOutQuint","delayout":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":"","backgroundId":"","thumbnailId":""},"sublayers":[{"subtitle":"Price","type":"h6","image":"","html":"only $499","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"600","rotatein":"30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#ff7700\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"70%","left":"25%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""},{"subtitle":"Sample price","type":"h6","image":"","html":"Sample price","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"500","rotatein":"-30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"63%","left":"25%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""}]},{"properties":{"3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/computer.png","thumbnail":"","slidedelay":"4000","new_transitions":"on","slidedirection":"right","timeshift":"0","durationin":"1500","easingin":"easeInOutQuint","delayin":"0","durationout":"1500","easingout":"easeInOutQuint","delayout":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":"","backgroundId":"","thumbnailId":""},"sublayers":[{"subtitle":"Price","type":"h6","image":"","html":"only $1299","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"600","rotatein":"30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#ff7700\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"80%","left":"20%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""},{"subtitle":"Sample price","type":"h6","image":"","html":"Sample price","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"500","rotatein":"-30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"73%","left":"20%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""}]},{"properties":{"3d_transitions":"","2d_transitions":"73","custom_3d_transitions":"","custom_2d_transitions":"","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/plugins\/LayerSlider\/sampleslider\/phone.png","thumbnail":"","slidedelay":"4000","new_transitions":"on","slidedirection":"right","timeshift":"0","durationin":"1500","easingin":"easeInOutQuint","delayin":"0","durationout":"1500","easingout":"easeInOutQuint","delayout":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":"","backgroundId":"","thumbnailId":""},"sublayers":[{"subtitle":"Price","type":"h6","image":"","html":"only $199","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"600","rotatein":"30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#ff7700\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"50%","left":"80%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""},{"subtitle":"Sample price","type":"h6","image":"","html":"Sample price","slidedirection":"fade","durationin":"500","easingin":"easeInOutQuint","delayin":"500","rotatein":"-30","scalein":".1","slideoutdirection":"fade","durationout":"500","easingout":"easeInOutQuint","delayout":"0","rotateout":"0","scaleout":".1","level":"-1","showuntil":"0","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"20\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"20\\\",\\\"font-family\\\":\\\"\\'Oswald\\'\\\",\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\",\\\"background\\\":\\\"#000000\\\",\\\"border-radius\\\":\\\"5\\\"}","top":"43%","left":"80%","style":"font-weight: 400; box-shadow: 0px 2px 8px -2px black;","id":"","class":"","title":"","alt":"","rel":"","imageId":""}]}]},{"properties":{"post_type":["portfolio"],"post_categories":["1"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Shop","width":"100%","height":"480","responsive":"on","maxwidth":"","forceresponsive":"on","responsiveunder":"1170","sublayercontainer":"1140","autostart":"on","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","skin":"v5","backgroundcolor":" #ecf0f1","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","circletimer":"on","thumb_nav":"disabled","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autoplayvideos":"on","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","lazyload":"on","relativeurls":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: -10px; top: -10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) {\r\n\r\n}","cbstart":"function(data) {\r\n\r\n}","cbstop":"function(data) {\r\n\r\n}","cbpause":"function(data) {\r\n\r\n}","cbanimstart":"function(data) {\r\n\r\n}","cbanimstop":"function(data) {\r\n\r\n}","cbprev":"function(data) {\r\n\r\n}","cbnext":"function(data) {\r\n\r\n}"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"5","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"","background":"","thumbnailId":"","thumbnail":"","slidedelay":"6000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"tShirt Blur 1","media":"img","type":"p","imageId":"525","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"80\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"6\\\"}","url":"","target":"_self","styles":"{}","top":"258px","left":"173px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"tShirt Blur 2","media":"img","type":"p","imageId":"525","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/3.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"80\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{}","top":"258px","left":"601px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"tShirt Big","media":"img","type":"p","imageId":"524","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{}","top":"66px","left":"266px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Happy Ninja","media":"html","type":"p","imageId":"","image":"","html":"<strong>HAPPY<\/strong> <span style=\\\"font-weight:100\\\">NINJA <\/span>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeInOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"180\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"10\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"10\\\",\\\"font-size\\\":\\\"18\\\",\\\"line-height\\\":\\\"24\\\",\\\"color\\\":\\\"#1abc9c\\\",\\\"background\\\":\\\"#FFFFFF\\\",\\\"border-radius\\\":\\\"4\\\"}","top":"216px","left":"778px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"From 12$","media":"html","type":"p","imageId":"","image":"","html":"<strong>FROM<\/strong> <span style=\\\"font-weight:100\\\">12$ <\/span>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeInOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"180\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"10\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"10\\\",\\\"font-size\\\":\\\"14\\\",\\\"line-height\\\":\\\"24\\\",\\\"color\\\":\\\"#34495e\\\",\\\"background\\\":\\\"#FFFFFF\\\",\\\"border-radius\\\":\\\"4\\\"}","top":"240px","left":"778px","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"5","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"145","background":"\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/slider1-bg.png","thumbnailId":"","thumbnail":"","slidedelay":"6000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Hoodie Blur 1","media":"img","type":"p","imageId":"527","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/hoodie2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1800\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"6\\\"}","url":"","target":"_self","styles":"{}","top":"150px","left":"210px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Hoodie Blur 2","media":"img","type":"p","imageId":"527","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/hoodie2.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1500\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"4\\\"}","url":"","target":"_self","styles":"{}","top":"150px","left":"610px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Hoodie Big","media":"img","type":"p","imageId":"526","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/hoodie1.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"100\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{}","top":"-6px","left":"336px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Ninja Silhouette","media":"html","type":"p","imageId":"","image":"","html":"<strong>Ninja<\/strong> <span style=\\\"font-weight:100\\\">Silhouette <\/span>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeInOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"180\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"2\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"10\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"10\\\",\\\"font-size\\\":\\\"18\\\",\\\"line-height\\\":\\\"24\\\",\\\"color\\\":\\\"#f1c40f\\\",\\\"background\\\":\\\"#FFFFFF\\\",\\\"border-radius\\\":\\\"4\\\"}","top":"282px","left":"705px","style":"text-transform:uppercase","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"From 35$","media":"html","type":"p","imageId":"","image":"","html":"<strong>FROM<\/strong> <span style=\\\"font-weight:100\\\">35$ <\/span>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1000\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeInOutElastic\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"180\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"3\\\"}","url":"","target":"_self","styles":"{\\\"padding-top\\\":\\\"5\\\",\\\"padding-right\\\":\\\"10\\\",\\\"padding-bottom\\\":\\\"5\\\",\\\"padding-left\\\":\\\"10\\\",\\\"font-size\\\":\\\"14\\\",\\\"line-height\\\":\\\"24\\\",\\\"color\\\":\\\"#34495e\\\",\\\"background\\\":\\\"#FFFFFF\\\",\\\"border-radius\\\":\\\"4\\\"}","top":"310px","left":"705px","style":"","id":"","class":"","title":"","alt":"","rel":""}]}]},{"properties":{"post_type":["portfolio"],"post_categories":["1"],"post_tags":["31"],"post_taxonomy":"0","post_orderby":"date","post_order":"DESC","post_offset":"-1","title":"Home Flatter","width":"100%","height":"600","responsive":"on","maxwidth":"","forceresponsive":"on","responsiveunder":"1140","sublayercontainer":"0","autostart":"on","pauseonhover":"on","firstlayer":"1","animatefirstlayer":"on","keybnav":"on","touchnav":"on","loops":"0","forceloopnum":"on","skin":"v5","backgroundcolor":"","backgroundimage":"","sliderstyle":"margin-bottom: 0px;","navprevnext":"on","navstartstop":"on","navbuttons":"on","hoverprevnext":"on","circletimer":"on","thumb_nav":"hover","thumb_container_width":"60%","thumb_width":"100","thumb_height":"60","thumb_active_opacity":"35","thumb_inactive_opacity":"100","autoplayvideos":"on","autopauseslideshow":"auto","youtubepreview":"maxresdefault.jpg","imgpreload":"on","lazyload":"on","yourlogoId":"","yourlogo":"","yourlogostyle":"left: -10px; top: -10px;","yourlogolink":"","yourlogotarget":"_self","cbinit":"function(element) {\r\n\r\n}","cbstart":"function(data) {\r\n\r\n}","cbstop":"function(data) {\r\n\r\n}","cbpause":"function(data) {\r\n\r\n}","cbanimstart":"function(data) {\r\n\r\n}","cbanimstop":"function(data) {\r\n\r\n}","cbprev":"function(data) {\r\n\r\n}","cbnext":"function(data) {\r\n\r\n}"},"layers":[{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"145","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/slider1-bg.png","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Layer #1","media":"html","type":"h1","imageId":"","image":"","html":"<div class=\\\"container\\\"><div class=\\\"col-md-4 col-sm-4 col-xs-4\\\">Introducing <strong>Flatter<\/strong><\/div><\/div>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"300\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"198px","left":"","style":"margin-left:auto;\r\nmargin-right:auto;\r\nposition:relative;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Layer #2","media":"html","type":"p","imageId":"","image":"","html":"<div class=\\\"container\\\"><div class=\\\"col-md-4 col-sm-4 col-xs-4\\\">A professional wordpress theme for creative agencies and freelancers. Theme has tons of options and possibilities including powerful page builder and admin options<\/div><\/div>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"400\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-size\\\":\\\"18px\\\",\\\"line-height\\\":\\\"1.4em\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"215px","left":"","wordwrap":"on","style":"font-weight:200;\r\nposition:relative;\r\nmargin-left:auto;\r\nmargin-right:auto;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Layer #3","media":"html","type":"p","imageId":"","image":"","html":"<div class=\\\"container\\\"><div class=\\\"col-md-2 col-sm-2 col-xs-2\\\"><a class=\\\"btn btn-default btn-md hidden-xs\\\" href=\\\"http:\/\/demo.themeton.com\/flatter\/features\/\\\">Learn More<\/a><a class=\\\"btn btn-default btn-xs visible-xs\\\" href=\\\"http:\/\/demo.themeton.com\/flatter\/features\/\\\">Learn More<\/a><\/div><\/div>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"242px","left":"","style":"position:relative;\r\nmargin-left:auto;\r\nmargin-right:auto;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Layer #4","media":"img","type":"p","imageId":"738","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/iphone-light.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80px","left":"80%","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Layer #4 copy","media":"img","type":"p","imageId":"737","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/iphone-dark.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"80px","left":"60%","style":"","id":"","class":"","title":"","alt":"","rel":""}]},{"properties":{"post_offset":"-1","3d_transitions":"","2d_transitions":"","custom_3d_transitions":"","custom_2d_transitions":"","backgroundId":"742","background":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/slider2-bg.jpg","thumbnailId":"","thumbnail":"","slidedelay":"4000","timeshift":"0","layer_link":"","layer_link_target":"_self","id":"","deeplink":""},"sublayers":[{"subtitle":"Layer #4","media":"img","type":"p","imageId":"739","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/imac.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"900\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"60px","left":"656px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Layer #4 copy","media":"img","type":"p","imageId":"740","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/ipad.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"600\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"208px","left":"735px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Layer #4 copy copy","media":"img","type":"p","imageId":"741","image":"http:\/\/demo.themeton.com\/flatter\/wp-content\/uploads\/sites\/2\/2014\/01\/iphone.png","html":"","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"0\\\",\\\"offsetyin\\\":\\\"100\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"1200\\\",\\\"easingin\\\":\\\"easeInOutQuint\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"353px","left":"950px","style":"","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Layer #1","media":"html","type":"h1","imageId":"","image":"","html":"<div class=\\\"container\\\"><div class=\\\"col-md-4 col-sm-4 col-xs-4\\\">Simple <strong>Powerful<\/strong><\/div><\/div>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"300\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-size\\\":\\\"30px\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"228px","left":"","style":"position:relative;\r\nmargin-left:auto;\r\nmargin-right:auto;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Layer #2","media":"html","type":"p","imageId":"","image":"","html":"<div class=\\\"container\\\"><div class=\\\"col-md-4 col-sm-4 col-xs-4\\\">Responsive, Modern design based on Bootstrap 3 framework that can be used for any type of business. Drag and Drop PageBuilder has 27 elements and those have detailed options.<\/div><\/div>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"400\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{\\\"font-size\\\":\\\"18px\\\",\\\"line-height\\\":\\\"1.4em\\\",\\\"color\\\":\\\"#ffffff\\\"}","top":"250px","left":"","wordwrap":"on","style":"position:relative;\r\nmargin-right:auto;\r\nmargin-left:auto;","id":"","class":"","title":"","alt":"","rel":""},{"subtitle":"Layer #3","media":"html","type":"p","imageId":"","image":"","html":"<div class=\\\"container\\\"><div class=\\\"col-md-2 col-sm-2 col-xs-2\\\"><a class=\\\"btn btn-default btn-md hidden-xs\\\" href=\\\"http:\/\/demo.themeton.com\/flatter\/features\/\\\">Learn More<\/a><a class=\\\"btn btn-default btn-xs visible-xs\\\" href=\\\"http:\/\/demo.themeton.com\/flatter\/features\/\\\">Learn More<\/a><\/div><\/div>","post_text_length":"","transition":"{\\\"offsetxin\\\":\\\"80\\\",\\\"offsetyin\\\":\\\"0\\\",\\\"durationin\\\":\\\"1500\\\",\\\"delayin\\\":\\\"500\\\",\\\"easingin\\\":\\\"easeOutExpo\\\",\\\"fadein\\\":true,\\\"rotatein\\\":\\\"0\\\",\\\"rotatexin\\\":\\\"0\\\",\\\"rotateyin\\\":\\\"0\\\",\\\"transformoriginin\\\":\\\"50% 50% 0\\\",\\\"skewxin\\\":\\\"0\\\",\\\"skewyin\\\":\\\"0\\\",\\\"scalexin\\\":\\\"1\\\",\\\"scaleyin\\\":\\\"1\\\",\\\"offsetxout\\\":\\\"-80\\\",\\\"offsetyout\\\":\\\"0\\\",\\\"durationout\\\":\\\"400\\\",\\\"showuntil\\\":\\\"0\\\",\\\"easingout\\\":\\\"easeInOutQuint\\\",\\\"fadeout\\\":true,\\\"rotateout\\\":\\\"0\\\",\\\"rotatexout\\\":\\\"0\\\",\\\"rotateyout\\\":\\\"0\\\",\\\"transformoriginout\\\":\\\"50% 50% 0\\\",\\\"skewxout\\\":\\\"0\\\",\\\"skewyout\\\":\\\"0\\\",\\\"scalexout\\\":\\\"1\\\",\\\"scaleyout\\\":\\\"1\\\",\\\"parallaxlevel\\\":\\\"0\\\"}","url":"","target":"_self","styles":"{}","top":"280px","left":"","style":"position:relative;\r\nmargin-left:auto;\r\nmargin-right:auto;","id":"","class":"","title":"","alt":"","rel":""}]}]}]